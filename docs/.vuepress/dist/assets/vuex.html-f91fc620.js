import{_ as t,M as s,p as i,q as d,R as e,t as a,N as o,a1 as c}from"./framework-204010b2.js";const r={},l=e("h2",{id:"_1-什么是-vuex",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_1-什么是-vuex","aria-hidden":"true"},"#"),a(" 1：什么是 vuex")],-1),u=e("p",null,"https://www.jianshu.com/p/2e5973fe1223",-1),p=e("strong",null,"状态管理模式",-1),v={href:"https://github.com/vuejs/vue-devtools",target:"_blank",rel:"noopener noreferrer"},m=c(`<h2 id="_2-vuex-工作流程" tabindex="-1"><a class="header-anchor" href="#_2-vuex-工作流程" aria-hidden="true">#</a> 2:vuex 工作流程</h2><p><img src="https://upload-images.jianshu.io/upload_images/16550832-20d0ad3c60a99111.png?imageMogr2/auto-orient/strip|imageView2/2/format/webp" alt="img"></p><p>首先，<code>Vue</code>组件如果调用某个<code>VueX</code>的方法过程中需要向后端请求时或者说出现异步操作时，需要<code>dispatch</code> VueX 中<code>actions</code>的方法，以保证数据的同步。可以说，<code>action</code>的存在就是为了让<code>mutations</code>中的方法能在异步操作中起作用。</p><p>如果没有异步操作，那么我们就可以直接在组件内提交状态中的<code>Mutations</code>中自己编写的方法来达成对<code>state</code>成员的操作。不建议在组件中直接对<code>state</code>中的成员进行操作，这是因为直接修改(例如：<code>this.$store.state.name = &#39;hello&#39;</code>)的话不能被<code>VueDevtools</code>所监控到。</p><p>最后被修改后的 state 成员会被渲染到组件的原位置当中去。</p><h2 id="_3-核心概念" tabindex="-1"><a class="header-anchor" href="#_3-核心概念" aria-hidden="true">#</a> 3：核心概念</h2><h5 id="_1-state-基本数据" tabindex="-1"><a class="header-anchor" href="#_1-state-基本数据" aria-hidden="true">#</a> 1：state（基本数据）</h5><p>​ <strong>单一状态树</strong></p><p>Vuex 使用单一状态树，即用一个对象就包含了全部的状态数据。<code>state</code>作为构造器选项，定义了所有我们需要的基本状态参数</p><p>​ <strong>组件中获取数据</strong></p><p>​ $store.state.名称</p><p>​ <strong>增删 state 中的成员</strong></p><p>为了配合 Vue 的响应式数据，我们在 Mutations 的方法中，应当使用 Vue 提供的方法来进行操作。如果使用<code>delete</code>或者<code>xx.xx = xx</code>的形式去删或增，则 Vue 不能对数据进行实时响应。</p><ul><li><p>Vue.set 为某个对象设置成员的值，若不存在则新增</p><p>例如对 state 对象中添加一个 age 成员</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Vue<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> <span class="token string">&quot;age&quot;</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>Vue.delete 删除成员</p><p>将刚刚添加的 age 成员删除</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Vue<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> <span class="token string">&quot;age&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><h5 id="_2-getters-从基本数据派生的数据" tabindex="-1"><a class="header-anchor" href="#_2-getters-从基本数据派生的数据" aria-hidden="true">#</a> 2：getters（从基本数据派生的数据）</h5><p>可以对 state 中的成员加工后传递给外界</p><p>Getters 中的方法有两个默认参数</p><ul><li>state 当前 VueX 对象中的状态对象</li><li>getters 当前 getters 对象，用于将 getters 下的其他 getter 拿来用</li></ul><p>相当于 computed 计算属性，用于对 state 中的数据进行处理</p><h5 id="组件中-使用方式" tabindex="-1"><a class="header-anchor" href="#组件中-使用方式" aria-hidden="true">#</a> 组件中 <strong>使用</strong>方式</h5><p>​ $store.getters.方法名;</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>getters:{
    nameInfo(state){
        return &quot;姓名:&quot;+state.name
    },
    fullInfo(state,getters){
        return getters.nameInfo+&#39;年龄:&#39;+state.age
    }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-mutations-提交更改数据的方法" tabindex="-1"><a class="header-anchor" href="#_3-mutations-提交更改数据的方法" aria-hidden="true">#</a> 3：mutations （ 提交更改数据的方法）</h5><p><code>mutations</code>是操作<code>state</code>数据的方法的集合，比如对该数据的修改、增加、删除等等。</p><p>相当于 methods，</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code> mutations: {
        addCount(state, payload) {
            state.count++;
            console.log(payload);
        },
        reduceCount(state) {
            state.count--;
        }
    },
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="组件中-使用方式-1" tabindex="-1"><a class="header-anchor" href="#组件中-使用方式-1" aria-hidden="true">#</a> 组件中 使用方式</h5><p>this. $store.<strong>commit</strong>(&quot;方法名&quot;,携带的参数);当需要多个参数时用对象保存</p><h5 id="_4-actions-包裹-mutations-使之可以异步-。" tabindex="-1"><a class="header-anchor" href="#_4-actions-包裹-mutations-使之可以异步-。" aria-hidden="true">#</a> 4：actions （包裹 mutations，使之可以异步）。</h5><p>由于直接在<code>mutation</code>方法中进行异步操作，将会引起数据失效。所以提供了 Actions 来专门进行异步操作，最终提交<code>mutation</code>方法。</p><p><code>Actions</code>中的方法有两个默认参数</p><ul><li><code>context</code> 上下文(相当于箭头函数中的 this)对象</li><li><code>payload</code> 挂载参数</li></ul><p>由于<code>setTimeout</code>是异步操作，所以需要使用<code>actions</code></p><h5 id="组件中使用方式" tabindex="-1"><a class="header-anchor" href="#组件中使用方式" aria-hidden="true">#</a> 组件中使用方式</h5><p>$store.dispatch(&quot;action&quot;)</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>  actions: {
        increment(context) {
            setInterval(function() {
                context.commit(&quot;addCount&quot;);
            }, 1000);
        }
    },
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-modules" tabindex="-1"><a class="header-anchor" href="#_5-modules" aria-hidden="true">#</a> 5：modules</h4><p>当项目庞大，状态非常多时，可以采用模块化管理模式。Vuex 允许我们将 store 分割成<strong>模块（module）</strong>。每个模块拥有自己的 <code>state、mutation、action、getter</code>、甚至是嵌套子模块——从上至下进行同样方式的分割。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>modules:{
    a:{
        state:{},
        getters:{},
        ....
    }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>组件中使用方式</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>this.$store.a.state
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,41);function h(g,b){const n=s("ExternalLinkIcon");return i(),d("div",null,[l,u,e("p",null,[a("Vuex 是一个专为 Vue.js 应用程序开发的"),p,a("。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。Vuex 也集成到 Vue 的官方调试工具 "),e("a",v,[a("devtools extension (opens new window)"),o(n)]),a("，提供了诸如零配置的 time-travel 调试、状态快照导入导出等高级调试功能。")]),m])}const _=t(r,[["render",h],["__file","vuex.html.vue"]]);export{_ as default};
